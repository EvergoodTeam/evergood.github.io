"use strict";(self.webpackChunkevergood_docs=self.webpackChunkevergood_docs||[]).push([[6911],{5327:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>t,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var o=n(4848),i=n(8453);const s={sidebar_label:"Configuration",id:"configuration",title:"Configuration",description:"Giving the user control with configs",slug:"/docs/chassis/configuration"},t=void 0,a={id:"chassis/configuration",title:"Configuration",description:"Giving the user control with configs",source:"@site/docs/chassis/configuration.mdx",sourceDirName:"chassis",slug:"/docs/chassis/configuration",permalink:"/docs/chassis/configuration",draft:!1,unlisted:!1,editUrl:"https://github.com/EvergoodTeam/evergoodteam.github.io/tree/main/docs/chassis/configuration.mdx",tags:[],version:"current",frontMatter:{sidebar_label:"Configuration",id:"configuration",title:"Configuration",description:"Giving the user control with configs",slug:"/docs/chassis/configuration"},sidebar:"docs",previous:{title:"Items",permalink:"/docs/chassis/items"},next:{title:"Resources / Assets",permalink:"/docs/chassis/resources"}},d={},c=[{value:"Creating your configs",id:"creating-your-configs",level:3},{value:"Adding properties",id:"adding-properties",level:3},{value:"Using properties",id:"using-properties",level:3},{value:"Result",id:"result",level:3}];function l(e){const r={a:"a",admonition:"admonition",br:"br",code:"code",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.admonition,{type:"caution",children:(0,o.jsxs)(r.p,{children:["As of ",(0,o.jsx)(r.code,{children:"1.2.3"}),", this is outdated. Refer to ",(0,o.jsx)(r.a,{href:"https://github.com/EvergoodTeam/Chassis/blob/1.19.2/src/main/java/evergoodteam/chassis/ChassisTestFeatures.java",children:"this test class"})," instead for the time being."]})}),"\n",(0,o.jsxs)(r.p,{children:["Configs can be very useful to the player, since they can be used to customize variables and behaviours present in a mod.",(0,o.jsx)(r.br,{}),"\n","A simple example can be creating a toggle for a block being added to the game."]}),"\n",(0,o.jsx)(r.h3,{id:"creating-your-configs",children:"Creating your configs"}),"\n",(0,o.jsxs)(r.p,{children:["First we have to declare our Configs, which we can do using ",(0,o.jsx)(r.code,{children:"ConfigBase"}),"."]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-java",children:'public static final ConfigBase YOURMOD_CONFIGS = new ConfigBase("yourmodid");\n'})}),"\n",(0,o.jsxs)(r.p,{children:["Once that is done, a folder with your ",(0,o.jsx)(r.code,{children:"modid"})," will be created in the game's ",(0,o.jsx)(r.code,{children:"config"})," directory, and in that folder will be located all the other files necessary for both ",(0,o.jsx)(r.strong,{children:"resources"})," as well as the ",(0,o.jsx)(r.code,{children:"yourmodid.properties"})," file."]}),"\n",(0,o.jsx)(r.p,{children:"Such a file can look something like this:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-bash",children:"# yourmodid Configs\r\n# Sat Jul 31 15:05:00 CET 2022\r\n\r\n# Lock yourmodid configs from being regenerated\r\nyourmodidConfigLocked = true\r\n# Lock yourmodid resources from being regenerated\r\nyourmodidResourceLocked = true\n"})}),"\n",(0,o.jsxs)(r.p,{children:["The first 2 properties will always be autogenerated with ",(0,o.jsx)(r.code,{children:"ConfigBase"})," and are used to determine, respectively, if the config files and if the resource files are locked (no need to regenerate them on startup)."]}),"\n",(0,o.jsxs)(r.p,{children:["This can also be utilized by the user, especially when an unintentional edit was made to the config files.",(0,o.jsx)(r.br,{}),"\n","Simply editing the value to ",(0,o.jsx)(r.code,{children:"false"})," will have those specific files be regenerated at startup and the property reset back to ",(0,o.jsx)(r.code,{children:"true"}),"."]}),"\n",(0,o.jsx)(r.h3,{id:"adding-properties",children:"Adding properties"}),"\n",(0,o.jsxs)(r.p,{children:["Using our ",(0,o.jsx)(r.code,{children:"ConfigBase"})," object we can call different methods, one of which is ",(0,o.jsx)(r.code,{children:"addProperty()"}),", used to add properties to both our object and the ",(0,o.jsx)(r.code,{children:"yourmodid.properties"})," file.",(0,o.jsx)(r.br,{}),"\n","You can provide a comment to the property, which will appear in the config file, or simply not have one."]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-java",children:'YOURMOD_CONFIGS.addProperty("enableRubyOre", true, "Enables the Ruby Ore block")\n'})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-java",children:'YOURMOD_CONFIGS.addProperty("enableRubyItem", true)\n'})}),"\n",(0,o.jsxs)(r.p,{children:["To register a property we have to follow it up with the method ",(0,o.jsx)(r.code,{children:"registerProperties()"}),"."]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-java",children:'YOURMOD_CONFIGS.addProperty("enableRubyOre", true, "Enables the Ruby Ore block").registerProperties();\n'})}),"\n",(0,o.jsxs)(r.admonition,{type:"tip",children:[(0,o.jsxs)(r.p,{children:["You can concatenate multiple ",(0,o.jsx)(r.code,{children:"addProperty()"})," and have the method ",(0,o.jsx)(r.code,{children:"registerProperties()"})," at the end."]}),(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-java",children:'YOURMOD_CONFIGS.addProperty("enableRubyOre", true, "Enables the Ruby Ore block")\r\n    .addProperty("enableRubyItem", true)\r\n    .registerProperties();\n'})})]}),"\n",(0,o.jsxs)(r.p,{children:["Now your ",(0,o.jsx)(r.code,{children:"yourmodid.properties"})," file will look something like this:"]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-bash",children:"# yourmodid Configs\r\n# Sat Jul 31 15:10:00 CET 2022\r\n\r\n# Lock yourmodid configs from being regenerated\r\nyourmodidConfigLocked = true\r\n# Lock yourmodid resources from being regenerated\r\nyourmodidResourceLocked = true\r\n\r\n# Enables the Ruby Ore block\r\nenableRubyOre = true\r\nenableRubyItem = true\n"})}),"\n",(0,o.jsx)(r.h3,{id:"using-properties",children:"Using properties"}),"\n",(0,o.jsxs)(r.p,{children:["Interacting with your ",(0,o.jsx)(r.code,{children:"yourmodid.properties"})," file can be done through the ",(0,o.jsx)(r.code,{children:"ConfigHandler"})," class.",(0,o.jsx)(r.br,{}),"\n","One of the available methods is ",(0,o.jsx)(r.code,{children:"getBooleanOption()"}),", which returns the Boolean value of the specified property from the config file, or the default value if it isn't present."]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-java",children:'if (ConfigHandler.getBooleanOption(YOURMOD_CONFIGS, "enableRubyOre", true)){\r\n    // Do something \r\n}\n'})}),"\n",(0,o.jsx)(r.h3,{id:"result",children:"Result"}),"\n",(0,o.jsx)(r.p,{children:"Your code should now look something like this:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-java",metastring:'title="MyMod.java"',children:'public static final ConfigBase YOURMOD_CONFIGS = new ConfigBase("yourmodid");\r\n\r\n@Override\r\npublic void onInitialize() {\r\n\r\n    YOURMOD_CONFIGS.addProperty("enableRubyOre", true, "Enables the Ruby Ore block")\r\n        .registerProperties();\r\n\r\n    if (ConfigHandler.getBooleanOption(YOURMOD_CONFIGS, "enableRubyOre", true)){\r\n        // Do something \r\n    }\r\n}\n'})})]})}function h(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>t,x:()=>a});var o=n(6540);const i={},s=o.createContext(i);function t(e){const r=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),o.createElement(s.Provider,{value:r},e.children)}}}]);