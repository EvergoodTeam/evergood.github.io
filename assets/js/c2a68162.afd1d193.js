"use strict";(self.webpackChunkevergood_docs=self.webpackChunkevergood_docs||[]).push([[556],{4137:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>m});var n=a(7294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},u=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(a),m=o,k=d["".concat(l,".").concat(m)]||d[m]||p[m]||r;return a?n.createElement(k,s(s({ref:t},u),{},{components:a})):n.createElement(k,s({ref:t},u))}));function m(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,s=new Array(r);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var c=2;c<r;c++)s[c]=a[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},4398:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var n=a(7462),o=(a(7294),a(4137));const r={sidebar_label:"Resources / Assets",sidebar_position:4,id:"resources",title:"Resources / Assets",description:"Giving our blocks and items assets, localization, tags, textures",slug:"/chassis/resources"},s=void 0,i={unversionedId:"chassis/resources",id:"chassis/resources",title:"Resources / Assets",description:"Giving our blocks and items assets, localization, tags, textures",source:"@site/docs/chassis/resources.mdx",sourceDirName:"chassis",slug:"/chassis/resources",permalink:"/docs/chassis/resources",draft:!1,editUrl:"https://github.com/EvergoodTeam/evergoodteam.github.io/tree/main/docs/chassis/resources.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_label:"Resources / Assets",sidebar_position:4,id:"resources",title:"Resources / Assets",description:"Giving our blocks and items assets, localization, tags, textures",slug:"/chassis/resources"},sidebar:"docs",previous:{title:"Configuration",permalink:"/docs/chassis/configuration"},next:{title:"Support Us",permalink:"/docs/support"}},l={},c=[{value:"Creating a ResourcePack",id:"creating-a-resourcepack",level:2},{value:"Creating assets",id:"creating-assets",level:3},{value:"Result",id:"result",level:3},{value:"Injection",id:"injection",level:2},{value:"Block models",id:"block-models",level:3},{value:"Recipes",id:"recipes",level:3},{value:"Result",id:"result-1",level:3}],u={toc:c};function p(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"With Chassis you can generate asset files (blockstates, models, lang, textures, tags) through code, without having to experience the pain of creating 5 different files for each block/item you make."),(0,o.kt)("p",null,"This can be done in 2 ways: "),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"through a ",(0,o.kt)("a",{parentName:"li",href:"#creating-a-resourcepack"},(0,o.kt)("strong",{parentName:"a"},"ResourcePack")),", which has the benefit of being able to hold all sorts of assets"),(0,o.kt)("li",{parentName:"ul"},"through ",(0,o.kt)("a",{parentName:"li",href:"#injection"},(0,o.kt)("strong",{parentName:"a"},"injection")),", which is limited to only block models and recipes, but can be faster than creating a ResourcePack.")),(0,o.kt)("h2",{id:"creating-a-resourcepack"},"Creating a ResourcePack"),(0,o.kt)("p",null,"To start, you will first need to create a ",(0,o.kt)("inlineCode",{parentName:"p"},"ResourcePackBase")," object, which will generate those assets in your config folder.  "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'public static final ResourcePackBase YOURMOD_RESOURCES = new ResourcePackBase(YOURMOD_CONFIGS, "yourmodid");\n')),(0,o.kt)("p",null,"This will also create a ",(0,o.kt)("strong",{parentName:"p"},"ResourcePack"),", visibile from the appropriate menu in-game. You can customize it by adding an URL with an image to use as the icon and a hex color to customize the description's color."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'public static final ResourcePackBase YOURMOD_RESOURCES = new ResourcePackBase(YOURMOD_CONFIGS, "yourmodid", \n    "https://evergoodteam.github.io/utils/icons/chassisIcon.png", \n    "53a074");\n')),(0,o.kt)("p",null,"To customize the description you can add the entries listed here to your language file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="en_us.lang"',title:'"en_us.lang"'},'{\n  "yourmodid.metadata.description": "My beatiful assets",\n  "pack.source.yourmodid": "My beatiful assets"\n}\n')),(0,o.kt)("p",null,"Here is an example of how it can look in-game:"),(0,o.kt)("p",null,(0,o.kt)("img",{src:a(4802).Z,width:"416",height:"328"})),(0,o.kt)("p",null,"You can hide it from the menu using the ",(0,o.kt)("inlineCode",{parentName:"p"},"hide()")," method."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"YOURMOD_RESOURCES.hide();\n")),(0,o.kt)("h3",{id:"creating-assets"},"Creating assets"),(0,o.kt)("p",null,"Through your ",(0,o.kt)("inlineCode",{parentName:"p"},"ResourcePackBase")," object you can add assets, such as:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Global Tags (useful for recipes)"),(0,o.kt)("li",{parentName:"ul"},"Blockstates"),(0,o.kt)("li",{parentName:"ul"},"Models"),(0,o.kt)("li",{parentName:"ul"},"Drop LootTables (specify what a block drops when mined)"),(0,o.kt)("li",{parentName:"ul"},"Required tool Tags (tool required to mine a block)"),(0,o.kt)("li",{parentName:"ul"},"Mining level Tags (tool tier required to mine a block)"),(0,o.kt)("li",{parentName:"ul"},"Textures"),(0,o.kt)("li",{parentName:"ul"},"Language files")),(0,o.kt)("p",null,"You can see these options by checking out the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/EvergoodTeam/Chassis/blob/1.19/src/main/java/evergoodteam/chassis/objects/resourcepacks/ResourcePackBase.java"},(0,o.kt)("inlineCode",{parentName:"a"},"ResourcePackBase")," class")),(0,o.kt)("p",null,"Here is an example from the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/EvergoodTeam/Chassis"},"Chassis source code"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'CHASSIS_RESOURCES.createGlobalTag("testblock")\n                .createBlockstate("testblock")\n                .createBlockModels("testblock", "testblock", "all")\n                .createBlockDropLootTable("testblock")\n                .createRequiredToolTag("pickaxe", new String[]{"testblock"})\n                .createMiningLevelTag("stone", new String[]{"testblock"})\n                .createTexture(true, "https://i.imgur.com/BAStRdD.png", "testblock") // Truly a legendary URL\n\n                .createItemModel("testitem", "testitem")\n                .createTexture(false, "https://i.imgur.com/BAStRdD.png", "testitem")\n\n                .createLang("en_us", new HashMap<>() {{\n                    put("block.chassis.testblock", "Test Block");\n                    put("item.chassis.testitem", "Test Item");\n                    put("itemGroup.chassis.testgroup", "Test Group");\n                }});\n')),(0,o.kt)("h3",{id:"result"},"Result"),(0,o.kt)("p",null,"Your code should now look something like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="MyMod.java"',title:'"MyMod.java"'},'public static final ResourcePackBase YOURMOD_RESOURCES = new ResourcePackBase(YOURMOD_CONFIGS, "yourmodid");\n\n@Override\npublic void onInitialize() {\n\n    YOURMOD_RESOURCES.createGlobalTag("rubyblock")\n        .createBlockstate("rubyblock")\n        .createBlockModels("rubyblock", "rubyblock", "all");\n}\n')),(0,o.kt)("h2",{id:"injection"},"Injection"),(0,o.kt)("p",null,"Injection is done through the ",(0,o.kt)("inlineCode",{parentName:"p"},"InjectionHandler")," class and the methods it provides.",(0,o.kt)("br",{parentName:"p"}),"\n","You may use it in conjunction with a ",(0,o.kt)("strong",{parentName:"p"},"ResourcePack")," that doesn't worry about models and recipes."),(0,o.kt)("h3",{id:"block-models"},"Block models"),(0,o.kt)("p",null,"To have all the blocks from your mod supplied with block models, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"addModelInjection()")," method."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'InjectionHandler.addModelInjection("yourmodid");\n')),(0,o.kt)("p",null,"If you want a block to behave like a column texture-wise (see Basalt), you can specify the type with the method ",(0,o.kt)("inlineCode",{parentName:"p"},"InjectionHandler.addColumnType()"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'InjectionHandler.addColumnType("basalt");\n')),(0,o.kt)("h3",{id:"recipes"},"Recipes"),(0,o.kt)("p",null,"Adding a recipe first requires a ",(0,o.kt)("inlineCode",{parentName:"p"},"JsonObject"),", which contains all the information needed in the json format.",(0,o.kt)("br",{parentName:"p"}),"\n","You can create a recipe json through the ",(0,o.kt)("inlineCode",{parentName:"p"},"RecipeJson")," class, which provides methods for shaped and shapeless recipes, as well as 3x3 and ring shapes."),(0,o.kt)("p",null,"To now create the recipe we can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"addRecipe()")," method:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'InjectionHandler.addRecipe("yourmodid", "rubyblock", \n    RecipeJson.create3x3RecipeJson("item", \n        new Identifier("yourmodid", "ruby"), \n        new Identifier("yourmodid", "rubyblock"), \n    1));\n')),(0,o.kt)("h3",{id:"result-1"},"Result"),(0,o.kt)("p",null,"Your code should now look something like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="MyMod.java"',title:'"MyMod.java"'},'@Override\npublic void onInitialize() {\n\n    InjectionHandler.addColumnType("basalt");\n    InjectionHandler.addModelInjection("yourmodid");\n    \n    InjectionHandler.addRecipe("yourmodid", "rubyblock", RecipeJson.create3x3RecipeJson("item", new Identifier("yourmodid", "ruby"), new Identifier("yourmodid", "rubyblock"), 1));\n}\n')))}p.isMDXComponent=!0},4802:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/chassisResourcePack-0cefeba50bd26489d5974536ac55fb3b.png"}}]);