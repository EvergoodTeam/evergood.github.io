"use strict";(self.webpackChunkevergood_docs=self.webpackChunkevergood_docs||[]).push([[49],{4137:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(n),g=r,m=d["".concat(s,".").concat(g)]||d[g]||c[g]||i;return n?o.createElement(m,a(a({ref:t},u),{},{components:n})):o.createElement(m,a({ref:t},u))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var p=2;p<i;p++)a[p]=n[p];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6325:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var o=n(7462),r=(n(7294),n(4137));const i={sidebar_label:"Configuration",id:"configuration",title:"Configuration",description:"Giving the user control with configs",slug:"/chassis/configuration"},a=void 0,l={unversionedId:"chassis/configuration",id:"chassis/configuration",title:"Configuration",description:"Giving the user control with configs",source:"@site/docs/chassis/configuration.mdx",sourceDirName:"chassis",slug:"/chassis/configuration",permalink:"/docs/chassis/configuration",draft:!1,editUrl:"https://github.com/EvergoodTeam/evergoodteam.github.io/tree/main/docs/chassis/configuration.mdx",tags:[],version:"current",frontMatter:{sidebar_label:"Configuration",id:"configuration",title:"Configuration",description:"Giving the user control with configs",slug:"/chassis/configuration"},sidebar:"docs",previous:{title:"Items",permalink:"/docs/chassis/items"},next:{title:"Resource Packs",permalink:"/docs/chassis/resources"}},s={},p=[{value:"Creating your configs",id:"creating-your-configs",level:3},{value:"Properties / options",id:"properties--options",level:2},{value:"Creating categories",id:"creating-categories",level:2},{value:"Creating options",id:"creating-options",level:2},{value:"Using properties",id:"using-properties",level:2},{value:"Customizing the config screen",id:"customizing-the-config-screen",level:2},{value:"Networking",id:"networking",level:2},{value:"Result",id:"result",level:3}],u={toc:p};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Configs can be very useful to the player, since they can be used to customize variables and behaviours present in a mod.",(0,r.kt)("br",{parentName:"p"}),"\n","A simple example can be creating a toggle for a block being added to the game."),(0,r.kt)("h3",{id:"creating-your-configs"},"Creating your configs"),(0,r.kt)("p",null,"First we have to declare our Configs, which we can do using ",(0,r.kt)("inlineCode",{parentName:"p"},"ConfigBase"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'public static final ConfigBase YOURMOD_CONFIGS = new ConfigBase("yourmodid");\n')),(0,r.kt)("p",null,"Once that is done, a folder with your ",(0,r.kt)("inlineCode",{parentName:"p"},"modid")," will be created in the game's ",(0,r.kt)("inlineCode",{parentName:"p"},"config")," directory, and in that folder will be located all the other files necessary for both ",(0,r.kt)("strong",{parentName:"p"},"Resource Packs")," as well as the ",(0,r.kt)("inlineCode",{parentName:"p"},"yourmodid.properties")," file."),(0,r.kt)("p",null,"Such a file can look something like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="yourmodid.properties"',title:'"yourmodid.properties"'},"# yourmodid Configs\n# Sat Jul 31 15:05:00 CET 2022\n\n# Lock yourmodid configs from being regenerated\nyourmodidConfigLocked = true\n# Lock yourmodid resources from being regenerated\nyourmodidResourceLocked = true\n")),(0,r.kt)("p",null,"The first 2 properties will always be autogenerated with ",(0,r.kt)("inlineCode",{parentName:"p"},"ConfigBase")," and are used to determine, respectively, if the config files and if the resource files are locked (no need to regenerate them on startup)."),(0,r.kt)("p",null,"This can also be utilized by the user, especially when an unintentional edit was made to the config files.",(0,r.kt)("br",{parentName:"p"}),"\n","Simply editing the value to ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," will have those specific files be regenerated at startup and the property reset back to ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,r.kt)("h2",{id:"properties--options"},"Properties / options"),(0,r.kt)("p",null,"Using our ",(0,r.kt)("inlineCode",{parentName:"p"},"ConfigBase")," object we can call different methods to add properties / options, which will later be stored in the ",(0,r.kt)("inlineCode",{parentName:"p"},"yourmodid.properties")," file.  "),(0,r.kt)("p",null,"Currently there are 5 kinds of options:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Category"),", holds other options under a title"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Booleans"),", either true or false"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Double"),", a range of double values (e.g. 3.0 ~ 8.0)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Integer"),", a range of int values (e.g. 3 ~ 8)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Strings"),", a set of strings from which to choose a single one")),(0,r.kt)("h2",{id:"creating-categories"},"Creating categories"),(0,r.kt)("p",null,"With a ",(0,r.kt)("inlineCode",{parentName:"p"},"CategoryOption")," we can create, as the name implies, a category, useful for compartmentalizing our options.",(0,r.kt)("br",{parentName:"p"}),"\n","You can specify a comment for the 2nd parameter that will be used inside of the ",(0,r.kt)("inlineCode",{parentName:"p"},"yourmodid.properties")," file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'CategoryOption TUTORIAL = new CategoryOption(YOURMOD_CONFIGS, "Tutorial Category", "Some tutorial options, not much");\n\nYOURMOD_CONFIGS.addCategory(TUTORIAL)\n')),(0,r.kt)("p",null,"Adding comments can also be done through the ",(0,r.kt)("inlineCode",{parentName:"p"},"#setComment()")," method, available for all options."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'CategoryOption TUTORIAL = new CategoryOption(YOURMOD_CONFIGS, "Tutorial Category", "")\n        .setComment("Some tutorial options, not much");\n\nYOURMOD_CONFIGS.addCategory(TUTORIAL)\n')),(0,r.kt)("h2",{id:"creating-options"},"Creating options"),(0,r.kt)("p",null,"We can create options and directly add them to the ",(0,r.kt)("inlineCode",{parentName:"p"},"ConfigBase")," object, which will assign them to a generic\ncategory, or add them to our newly made category."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'CategoryOption TUTORIAL = new CategoryOption(YOURMOD_CONFIGS, "Tutorial Category", "Some tutorial options, not much");\n\nYOURMOD_CONFIGS.addBooleanProperty(\n                        new BooleanOption("genericBoolean",\n                                false,\n                                Text.literal("Boolean"),\n                                Text.literal("Tooltip0"))\n                                .setEnvType(EnvType.CLIENT))\n                .addCategory(TUTORIAL\n                        .setComment("Tutorial options")\n                        .addBooleanProperty(new BooleanOption("boolean", false, Text.literal("Boolean"), Text.literal("Boolean Tooltip"))\n                                .setComment("Boolean comment"))\n                        .addDoubleProperty(new DoubleSliderOption("double", 3, 8, 4.5, Text.literal("Slider"), Text.literal("Double Tooltip"))\n                                .setComment("Double comment"))\n                        .addIntegerSliderProperty(new IntegerSliderOption("integerSlider", 3, 8, 5, Text.literal("Integer Slider"), Text.literal("Integer Tooltip"))\n                                .setComment("Integer comment"))\n                        .addStringProperty(new StringSetOption("string", "test2", Set.of("test1", "test2", "test3", "test4"), Text.literal("String Set"), Text.literal("String Set Tooltip")))\n                );\n')),(0,r.kt)("p",null,"To register all of our properties we have to use the method ",(0,r.kt)("inlineCode",{parentName:"p"},"registerProperties()"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"YOURMOD_CONFIGS.registerProperties();\n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"You can concatenate multiple properties and have the method ",(0,r.kt)("inlineCode",{parentName:"p"},"#registerProperties()")," at the end.")),(0,r.kt)("p",null,"Now your ",(0,r.kt)("inlineCode",{parentName:"p"},"yourmodid.properties")," file will look something like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="yourmodid.properties"',title:'"yourmodid.properties"'},"# yourmodid Configs\n# Sat Jul 31 15:10:00 CET 2022\n\n# Lock yourmodid configs from being regenerated [default: false]\nyourmodidConfigLocked = true\n# Lock yourmodid resources from being regenerated [default: false]\nyourmodidResourceLocked = true\n\ngenericBoolean = false\n\n#################################################################################\n# Tutorial\n#-------------------------------------------------------------------------------#\n# General options\n#################################################################################\n\n# Hide the Chassis ResourcePack from the GUI [default: false]\nhideResourcePack = false\n# Boolean comment [default: false]\nboolean = false\n# Double comment [range: 3.0 ~ 8.0, default: 4.5]\ndouble = 4.5\n# Integer comment [range: 3 ~ 8, default: 5]\nintegerSlider = 5\nstring = test2\n")),(0,r.kt)("h2",{id:"using-properties"},"Using properties"),(0,r.kt)("p",null,"Interacting with your ",(0,r.kt)("inlineCode",{parentName:"p"},"yourmodid.properties")," file can be done through the ",(0,r.kt)("inlineCode",{parentName:"p"},"ConfigHandler")," class.",(0,r.kt)("br",{parentName:"p"}),"\n","One of the available methods is ",(0,r.kt)("inlineCode",{parentName:"p"},"getBooleanOption()"),", which returns the Boolean value of the specified property from the config file, or the default value if it isn't present."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'if (ConfigHandler.getBooleanOption(YOURMOD_CONFIGS, "enableRubyOre", true)){\n    // Do something \n}\n')),(0,r.kt)("h2",{id:"customizing-the-config-screen"},"Customizing the config screen"),(0,r.kt)("h2",{id:"networking"},"Networking"),(0,r.kt)("h3",{id:"result"},"Result"),(0,r.kt)("p",null,"Your code should now look something like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="MyMod.java"',title:'"MyMod.java"'},'public static final ConfigBase YOURMOD_CONFIGS = new ConfigBase("yourmodid");\n\n@Override\npublic void onInitialize() {\n\n    YOURMOD_CONFIGS.addProperty("enableRubyOre", true, "Enables the Ruby Ore block")\n        .registerProperties();\n\n    if (ConfigHandler.getBooleanOption(YOURMOD_CONFIGS, "enableRubyOre", true)){\n        // Do something \n    }\n}\n')))}c.isMDXComponent=!0}}]);