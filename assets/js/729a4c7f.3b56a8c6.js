"use strict";(self.webpackChunkevergood_docs=self.webpackChunkevergood_docs||[]).push([[905],{4137:(e,r,t)=>{t.d(r,{Zo:()=>p,kt:()=>v});var i=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);r&&(i=i.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,i)}return t}function n(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,i,a=function(e,r){if(null==e)return{};var t,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var d=i.createContext({}),l=function(e){var r=i.useContext(d),t=r;return e&&(t="function"==typeof e?e(r):n(n({},r),e)),t},p=function(e){var r=l(e.components);return i.createElement(d.Provider,{value:r},e.children)},c={inlineCode:"code",wrapper:function(e){var r=e.children;return i.createElement(i.Fragment,{},r)}},u=i.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,d=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(t),v=a,m=u["".concat(d,".").concat(v)]||u[v]||c[v]||o;return t?i.createElement(m,n(n({ref:r},p),{},{components:t})):i.createElement(m,n({ref:r},p))}));function v(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,n=new Array(o);n[0]=u;var s={};for(var d in r)hasOwnProperty.call(r,d)&&(s[d]=r[d]);s.originalType=e,s.mdxType="string"==typeof e?e:a,n[1]=s;for(var l=2;l<o;l++)n[l]=t[l];return i.createElement.apply(null,n)}return i.createElement.apply(null,t)}u.displayName="MDXCreateElement"},4765:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>d,contentTitle:()=>n,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var i=t(7462),a=(t(7294),t(4137));const o={sidebar_label:"Providers \ud83c\udf89",sidebar_position:5,id:"providers",title:"Providers",description:"Using providers for datagen",slug:"/chassis/providers"},n=void 0,s={unversionedId:"chassis/providers",id:"chassis/providers",title:"Providers",description:"Using providers for datagen",source:"@site/docs/chassis/providers.mdx",sourceDirName:"chassis",slug:"/chassis/providers",permalink:"/docs/chassis/providers",draft:!1,editUrl:"https://github.com/EvergoodTeam/evergoodteam.github.io/tree/main/docs/chassis/providers.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_label:"Providers \ud83c\udf89",sidebar_position:5,id:"providers",title:"Providers",description:"Using providers for datagen",slug:"/chassis/providers"},sidebar:"docs",previous:{title:"Resource Packs",permalink:"/docs/chassis/resources"},next:{title:"Modpacks",permalink:"/docs/modpacks"}},d={},l=[{value:"Premise",id:"premise",level:2},{value:"Creating a provider object",id:"creating-a-provider-object",level:2},{value:"Running the providers",id:"running-the-providers",level:2},{value:"Available providers &amp; Usage",id:"available-providers--usage",level:2}],p={toc:l};function c(e){let{components:r,...t}=e;return(0,a.kt)("wrapper",(0,i.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"premise"},"Premise"),(0,a.kt)("p",null,"Before creating any providers, we need to understand why we can't simply initialize them anywhere."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"ResourcePackBase")," object comes with a ",(0,a.kt)("inlineCode",{parentName:"p"},"ProviderRegistry")," interface, used for declaring, initializing and adding providers."),(0,a.kt)("p",null,"Any sort of provider task should be done inside of its only method, ",(0,a.kt)("inlineCode",{parentName:"p"},"#registerProviders()"),", which is only called when resources are first reloaded."),(0,a.kt)("p",null,"This is done to avoid any issues with initializing classes that shouldn't be early on, like ",(0,a.kt)("inlineCode",{parentName:"p"},"ItemPredicate")," (used by loot tables), which usually has a couple mixins from other mods. Check out ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/DaFuqs/Spectrum/issues/190"},"this issue")," for a more in-depth look."),(0,a.kt)("h2",{id:"creating-a-provider-object"},"Creating a provider object"),(0,a.kt)("p",null,"To start, we'll need create a ",(0,a.kt)("inlineCode",{parentName:"p"},"ProviderRegistry")," object."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"YOURMOD_RESOURCES.providerRegistry = () -> {};\n")),(0,a.kt)("p",null,"With that, we can start creating our providers. Here is an example tag for our ruby item."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'YOURMOD_RESOURCES.providerRegistry = () -> {\n\n    CHASSIS_RESOURCES\n        .addProvider(ChassisTagProvider.create(Registry.ITEM, CHASSIS_RESOURCES)\n            .build(TagKey.of(Registry.ITEM_KEY, new Identifier("yourmodid:tutorial_item_tag")), builder -> builder\n                .add(RUBY)));\n\n};\n')),(0,a.kt)("p",null,"We should also give it an item model."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'YOURMOD_RESOURCES.providerRegistry = () -> {\n\n    CHASSIS_RESOURCES\n        .addProvider(ChassisTagProvider.create(Registry.ITEM, CHASSIS_RESOURCES)\n            .build(TagKey.of(Registry.ITEM_KEY, new Identifier("yourmodid:tutorial_item_tag")), builder -> builder\n                .add(RUBY)))\n        .addProvider(ChassisModelProvider.create(CHASSIS_RESOURCES)\n            .buildItem(consumer -> {\n                consumer.register(RUBY, Models.GENERATED);\n            }));\n\n};\n')),(0,a.kt)("h2",{id:"running-the-providers"},"Running the providers"),(0,a.kt)("p",null,"After adding all of our providers to the Resource Pack, we have to specify that we want them to be ran with the ",(0,a.kt)("inlineCode",{parentName:"p"},"#runProviders()")," method."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'YOURMOD_RESOURCES.providerRegistry = () -> {\n\n    CHASSIS_RESOURCES\n        .addProvider(ChassisTagProvider.create(Registry.ITEM, CHASSIS_RESOURCES)\n            .build(TagKey.of(Registry.ITEM_KEY, new Identifier("yourmodid:tutorial_item_tag")), builder -> builder\n                .add(RUBY)))\n        .addProvider(ChassisModelProvider.create(CHASSIS_RESOURCES)\n            .buildItem(consumer -> {\n                consumer.register(RUBY, Models.GENERATED);\n            }))\n        .runProviders();\n\n};\n')),(0,a.kt)("p",null,"With that, we're done dealing with assets!"),(0,a.kt)("h2",{id:"available-providers--usage"},"Available providers & Usage"),(0,a.kt)("p",null,"You can find a list of the providers that Chassis offers over at ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/EvergoodTeam/Chassis/tree/1.19.2/src/main/java/evergoodteam/chassis/datagen/providers"},"GitHub"),"."),(0,a.kt)("p",null,"To see working examples for all of the providers you can check the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/EvergoodTeam/Chassis/blob/1.19.2/src/main/java/evergoodteam/chassis/ChassisTestFeatures.java"},"Chassis' source code")," or ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/EvergoodTeam/Compressor/blob/1.19.2/src/main/java/evergoodteam/compressor/Compressor.java"},"Compressor's source code"),"."))}c.isMDXComponent=!0}}]);