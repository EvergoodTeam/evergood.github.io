"use strict";(self.webpackChunkevergood_docs=self.webpackChunkevergood_docs||[]).push([[5292],{7562:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>a,contentTitle:()=>t,default:()=>h,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var i=n(4848),o=n(8453);const r={sidebar_label:"Resources / Assets",sidebar_position:4,id:"resources",title:"Resources / Assets",description:"Giving our blocks and items assets, localization, tags, textures",slug:"/docs/chassis/resources"},t=void 0,c={id:"chassis/resources",title:"Resources / Assets",description:"Giving our blocks and items assets, localization, tags, textures",source:"@site/docs/chassis/resources.mdx",sourceDirName:"chassis",slug:"/docs/chassis/resources",permalink:"/docs/chassis/resources",draft:!1,unlisted:!1,editUrl:"https://github.com/EvergoodTeam/evergoodteam.github.io/tree/main/docs/chassis/resources.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_label:"Resources / Assets",sidebar_position:4,id:"resources",title:"Resources / Assets",description:"Giving our blocks and items assets, localization, tags, textures",slug:"/docs/chassis/resources"},sidebar:"docs",previous:{title:"Configuration",permalink:"/docs/chassis/configuration"},next:{title:"Modpacks",permalink:"/modpacks"}},a={},l=[{value:"Creating a ResourcePack",id:"creating-a-resourcepack",level:2},{value:"Creating assets",id:"creating-assets",level:3},{value:"Result",id:"result",level:3},{value:"Injection",id:"injection",level:2},{value:"Block models",id:"block-models",level:3},{value:"Recipes",id:"recipes",level:3},{value:"Result",id:"result-1",level:3}];function d(e){const s={a:"a",admonition:"admonition",br:"br",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.admonition,{type:"caution",children:(0,i.jsxs)(s.p,{children:["As of ",(0,i.jsx)(s.code,{children:"1.2.3"}),", this is outdated. Refer to ",(0,i.jsx)(s.a,{href:"https://github.com/EvergoodTeam/Chassis/blob/1.19.2/src/main/java/evergoodteam/chassis/ChassisTestFeatures.java",children:"this test class"})," instead for the time being."]})}),"\n",(0,i.jsx)(s.p,{children:"With Chassis you can generate asset files (blockstates, models, lang, textures, tags) through code, without having to experience the pain of creating 5 different files for each block/item you make."}),"\n",(0,i.jsx)(s.p,{children:"This can be done in 2 ways:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["through a ",(0,i.jsx)(s.a,{href:"#creating-a-resourcepack",children:(0,i.jsx)(s.strong,{children:"ResourcePack"})}),", which has the benefit of being able to hold all sorts of assets"]}),"\n",(0,i.jsxs)(s.li,{children:["through ",(0,i.jsx)(s.a,{href:"#injection",children:(0,i.jsx)(s.strong,{children:"injection"})}),", which is limited to only block models and recipes, but can be faster than creating a ResourcePack."]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"creating-a-resourcepack",children:"Creating a ResourcePack"}),"\n",(0,i.jsxs)(s.p,{children:["To start, you will first need to create a ",(0,i.jsx)(s.code,{children:"ResourcePackBase"})," object, which will generate those assets in your config folder."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-java",children:'public static final ResourcePackBase YOURMOD_RESOURCES = new ResourcePackBase(YOURMOD_CONFIGS, "yourmodid");\n'})}),"\n",(0,i.jsxs)(s.p,{children:["This will also create a ",(0,i.jsx)(s.strong,{children:"ResourcePack"}),", visibile from the appropriate menu in-game. You can customize it by adding an URL with an image to use as the icon and a hex color to customize the description's color."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-java",children:'public static final ResourcePackBase YOURMOD_RESOURCES = new ResourcePackBase(YOURMOD_CONFIGS, "yourmodid", \r\n    "https://evergoodteam.github.io/utils/icons/chassisIcon.png", \r\n    "53a074");\n'})}),"\n",(0,i.jsx)(s.p,{children:"To customize the description you can add the entries listed here to your language file:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-json",metastring:'title="en_us.lang"',children:'{\r\n  "yourmodid.metadata.description": "My beatiful assets",\r\n  "pack.source.yourmodid": "My beatiful assets"\r\n}\n'})}),"\n",(0,i.jsx)(s.p,{children:"Here is an example of how it can look in-game:"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{src:n(5997).A+"",width:"416",height:"328"})}),"\n",(0,i.jsxs)(s.p,{children:["You can hide it from the menu using the ",(0,i.jsx)(s.code,{children:"hide()"})," method."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-java",children:"YOURMOD_RESOURCES.hide();\n"})}),"\n",(0,i.jsx)(s.h3,{id:"creating-assets",children:"Creating assets"}),"\n",(0,i.jsxs)(s.p,{children:["Through your ",(0,i.jsx)(s.code,{children:"ResourcePackBase"})," object you can add assets, such as:"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Global Tags (useful for recipes)"}),"\n",(0,i.jsx)(s.li,{children:"Blockstates"}),"\n",(0,i.jsx)(s.li,{children:"Models"}),"\n",(0,i.jsx)(s.li,{children:"Drop LootTables (specify what a block drops when mined)"}),"\n",(0,i.jsx)(s.li,{children:"Required tool Tags (tool required to mine a block)"}),"\n",(0,i.jsx)(s.li,{children:"Mining level Tags (tool tier required to mine a block)"}),"\n",(0,i.jsx)(s.li,{children:"Textures"}),"\n",(0,i.jsx)(s.li,{children:"Language files"}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:["You can see these options by checking out the ",(0,i.jsxs)(s.a,{href:"https://github.com/EvergoodTeam/Chassis/blob/1.19/src/main/java/evergoodteam/chassis/objects/resourcepacks/ResourcePackBase.java",children:[(0,i.jsx)(s.code,{children:"ResourcePackBase"})," class"]})]}),"\n",(0,i.jsxs)(s.p,{children:["Here is an example from the ",(0,i.jsx)(s.a,{href:"https://github.com/EvergoodTeam/Chassis",children:"Chassis source code"}),":"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-java",children:'CHASSIS_RESOURCES.createGlobalTag("testblock")\r\n                .createBlockstate("testblock")\r\n                .createBlockModels("testblock", "testblock", "all")\r\n                .createBlockDropLootTable("testblock")\r\n                .createRequiredToolTag("pickaxe", new String[]{"testblock"})\r\n                .createMiningLevelTag("stone", new String[]{"testblock"})\r\n                .createTexture(true, "https://i.imgur.com/BAStRdD.png", "testblock") // Truly a legendary URL\r\n\r\n                .createItemModel("testitem", "testitem")\r\n                .createTexture(false, "https://i.imgur.com/BAStRdD.png", "testitem")\r\n\r\n                .createLang("en_us", new HashMap<>() {{\r\n                    put("block.chassis.testblock", "Test Block");\r\n                    put("item.chassis.testitem", "Test Item");\r\n                    put("itemGroup.chassis.testgroup", "Test Group");\r\n                }});\n'})}),"\n",(0,i.jsx)(s.h3,{id:"result",children:"Result"}),"\n",(0,i.jsx)(s.p,{children:"Your code should now look something like this:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-java",metastring:'title="MyMod.java"',children:'public static final ResourcePackBase YOURMOD_RESOURCES = new ResourcePackBase(YOURMOD_CONFIGS, "yourmodid");\r\n\r\n@Override\r\npublic void onInitialize() {\r\n\r\n    YOURMOD_RESOURCES.createGlobalTag("rubyblock")\r\n        .createBlockstate("rubyblock")\r\n        .createBlockModels("rubyblock", "rubyblock", "all");\r\n}\n'})}),"\n",(0,i.jsx)(s.h2,{id:"injection",children:"Injection"}),"\n",(0,i.jsxs)(s.p,{children:["Injection is done through the ",(0,i.jsx)(s.code,{children:"InjectionHandler"})," class and the methods it provides.",(0,i.jsx)(s.br,{}),"\n","You may use it in conjunction with a ",(0,i.jsx)(s.strong,{children:"ResourcePack"})," that doesn't worry about models and recipes."]}),"\n",(0,i.jsx)(s.h3,{id:"block-models",children:"Block models"}),"\n",(0,i.jsxs)(s.p,{children:["To have all the blocks from your mod supplied with block models, you can use the ",(0,i.jsx)(s.code,{children:"addModelInjection()"})," method."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-java",children:'InjectionHandler.addModelInjection("yourmodid");\n'})}),"\n",(0,i.jsxs)(s.p,{children:["If you want a block to behave like a column texture-wise (see Basalt), you can specify the type with the method ",(0,i.jsx)(s.code,{children:"InjectionHandler.addColumnType()"}),"."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-java",children:'InjectionHandler.addColumnType("basalt");\n'})}),"\n",(0,i.jsx)(s.h3,{id:"recipes",children:"Recipes"}),"\n",(0,i.jsxs)(s.p,{children:["Adding a recipe first requires a ",(0,i.jsx)(s.code,{children:"JsonObject"}),", which contains all the information needed in the json format.",(0,i.jsx)(s.br,{}),"\n","You can create a recipe json through the ",(0,i.jsx)(s.code,{children:"RecipeJson"})," class, which provides methods for shaped and shapeless recipes, as well as 3x3 and ring shapes."]}),"\n",(0,i.jsxs)(s.p,{children:["To now create the recipe we can use the ",(0,i.jsx)(s.code,{children:"addRecipe()"})," method:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-java",children:'InjectionHandler.addRecipe("yourmodid", "rubyblock", \r\n    RecipeJson.create3x3RecipeJson("item", \r\n        new Identifier("yourmodid", "ruby"), \r\n        new Identifier("yourmodid", "rubyblock"), \r\n    1));\n'})}),"\n",(0,i.jsx)(s.h3,{id:"result-1",children:"Result"}),"\n",(0,i.jsx)(s.p,{children:"Your code should now look something like this:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-java",metastring:'title="MyMod.java"',children:'@Override\r\npublic void onInitialize() {\r\n\r\n    InjectionHandler.addColumnType("basalt");\r\n    InjectionHandler.addModelInjection("yourmodid");\r\n    \r\n    InjectionHandler.addRecipe("yourmodid", "rubyblock", RecipeJson.create3x3RecipeJson("item", new Identifier("yourmodid", "ruby"), new Identifier("yourmodid", "rubyblock"), 1));\r\n}\n'})})]})}function h(e={}){const{wrapper:s}={...(0,o.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},5997:(e,s,n)=>{n.d(s,{A:()=>i});const i=n.p+"assets/images/chassisResourcePack-0cefeba50bd26489d5974536ac55fb3b.png"},8453:(e,s,n)=>{n.d(s,{R:()=>t,x:()=>c});var i=n(6540);const o={},r=i.createContext(o);function t(e){const s=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),i.createElement(r.Provider,{value:s},e.children)}}}]);